predicate lseg(loc x, set s) {
|  x == null        => { s =i {} ; emp }
|  not (x == null)  => { s =i {v} ++ s1 ; [x, 2] ** x :-> v ** (x + 1) :-> nxt ** lseg(nxt, s1) }
}

predicate lseg2(loc x, set s) {
|  x == null        => { s =i {} ; emp }
|  not (x == null)  => { s =i {v} ++ s1 ; [x, 3] ** x :-> v ** (x + 1) :-> (v + 1) ** (x + 2) :-> nxt ** lseg2(nxt, s1) }
}

predicate tree(loc x, set s) {
|  x == null        => {s =i {}; emp}
|  not (x == null)  => {s =i {v} ++ s1 ++ s2 ; [x, 3] ** x :-> v ** (x + 1) :-> l ** (x + 2) :-> r ** tree(l, s1) ** tree(r, s2)}
}

predicate srtl(loc x, int len, int lo, int hi) {
|  x == null        => { len == 0  /\  lo == 7  /\  hi == 0 ; emp }
|  not (x == null)  => { len == 1 + len1  /\  0 <= len1  /\  lo == (v <= lo1 ? v : lo1)  /\  hi == (hi1 <= v ? v : hi1) /\ v <= lo1 /\ 0 <= v /\ v <= 7 ;
                      [x, 2] ** x :-> v ** (x + 1) :-> nxt ** srtl(nxt, len1, lo1, hi1) }
}

predicate sll(loc x, int len, int lo, int hi) {
|  x == null        => { len == 0  /\  lo == 7  /\  hi == 0 ; emp }
|  not (x == null)  => { len == 1 + len1  /\  0 <= len1  /\  lo == (v <= lo1 ? v : lo1)  /\  hi == (hi1 <= v ? v : hi1) /\ 0 <= v /\ v <= 7;
                      [x, 2] ** x :-> v ** (x + 1) :-> nxt ** sll(nxt, len1, lo1, hi1) }
}

predicate account(loc x, int id, int bal) {
|  true  =>  { [x, 2] ** x :-> id ** (x + 1) :-> bal }
}
