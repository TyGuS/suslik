predicate sll(loc x, set s) {
|  x == 0        => { s == {} ; emp }
|  not (x == 0)  => { s == {v} ++ s1 ; [x, 2] ** x :-> v ** (x + 1) :-> nxt ** sll(nxt, s1) }
}

predicate tree(loc x, set s) {
|  x == 0        => {s == {} ; emp}
|  not (x == 0)  => {s == {v} ++ s1 ++ s2 ;
                     [x, 3] ** x :-> v ** (x + 1) :-> l ** (x + 2) :-> r ** tree(l, s1) ** tree(r, s2)}
}

predicate dll(loc x, loc z, set s) {
|  x == 0 => { s == {} ; emp }
|  not (x == 0) =>
   { s == {v} ++ s1 ; [x, 3] ** x :-> v ** (x + 1) :-> w ** (x + 2) :-> z ** dll(w, x, s1) }
}

predicate treeN(loc x, int n) {
|  x == 0        => { n == 0 ; emp }
|  not (x == 0)  => { n == 1 + n1 + n2  /\  0 <= n1  /\  0 <= n2 ;
                     [x, 3] ** x :-> v ** (x + 1) :-> l ** (x + 2) :-> r ** treeN(l, n1) ** treeN(r, n2)}
}

predicate avl(loc x, int n, int h) {
|  x == 0        => { n == 0 /\ h == 0; emp }
|  not (x == 0)  => { n == 1 + n1 + n2  /\  0 <= n1  /\  0 <= n2  /\
                      h2 <= h1 + 1 /\ h1 <= h2 + 1 /\ 0 <= h1  /\  0 <= h2 /\
                      m == (h1 <= h2 ? h2 : h1) /\ h == m + 1 ;
                     [x, 3] ** x :-> v ** (x + 1) :-> l ** (x + 2) :-> r ** avl(l, n1, h1) ** avl(r, n2, h2)}
}

predicate avlNHS(loc x, int n, int h, set s) {
|  x == 0        => { s == {} /\ n == 0 /\ h == 0; emp }
|  not (x == 0)  => { s == {v} ++ s1 ++ s2  /\ n == 1 + n1 + n2  /\  0 <= n1  /\  0 <= n2  /\
                      h2 <= h1 + 1 /\ h1 <= h2 + 1 /\ 0 <= h1  /\  0 <= h2 /\
                      m == (h1 <= h2 ? h2 : h1) /\ h == m + 1 ;
                     [x, 3] ** x :-> v ** (x + 1) :-> l ** (x + 2) :-> r ** avlNHS(l, n1, h1, s1) ** avlNHS(r, n2, h2, s2)}
}

