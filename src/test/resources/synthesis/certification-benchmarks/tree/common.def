predicate tree(loc x, set s) {
|  x == null        => {s =i {}; emp}
|  not (x == null)  => {s =i {v} ++ s1 ++ s2 ; [x, 3] ** x :-> v ** (x + 1) :-> l ** (x + 2) :-> r ** tree(l, s1) ** tree(r, s2)}
}

predicate treeN(loc x, int n) {
|  x == null        => { n == 0 ; emp }
|  not (x == null)  => { n == 1 + n1 + n2  /\  0 <= n1  /\  0 <= n2 ;
                       [x, 3] ** x :-> v ** (x + 1) :-> l ** (x + 2) :-> r ** treeN(l, n1) ** treeN(r, n2)}
}

predicate sll(loc x, set s) {
|  x == null        => { s =i {} ; emp }
|  not (x == null)  => { s =i {v} ++ s1 ; [x, 2] ** x :-> v ** (x + 1) :-> nxt ** sll(nxt, s1) }
}
